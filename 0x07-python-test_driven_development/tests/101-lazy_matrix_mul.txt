_  _ _ _ ALX SOFTWARE ENGINEERING _ _ _ _ _

FILENAME: tests/101-lazy_matrix_mul.txt

TEST FOR: 101-lazy_matrix_mul.py

importing the module:
>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Test for correct output:

>>> m_a = [[1, 2], [3, 4]]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
array([[ 7, 10],
       [15, 22]])

Test for matrix with a string

>>> m_a = [[1, 2], [3, 'julius']]
>>> m_b = [[1, 2], [3, 4]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
ValueError: data type must provide an itemsize



Test for both matrices with strings

>>> m_b = [[1, 2], [3, 'ashley']]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
ValueError: data type must provide an itemsize

>>> m_a = "Holberton"
>>> m_b = [[1, 2], [3, 8]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
TypeError: ufunc 'multiply' did not contain a loop with signature matching types dtype('<U9') dtype('<U9') dtype('<U9')


>>> m_a = [[1, 2], [3, 8]]
>>> m_b = "Holberton"
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
TypeError: ufunc 'multiply' did not contain a loop with signature matching types dtype('<U9') dtype('<U9') dtype('<U9')


>>> m_a = [[1, "2"], [3, 8]]
>>> m_b = [[1, 2], [3, 8]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
ValueError: data type must provide an itemsize


Test for a matrix with tuples

>>> m_a = [[1, 2], (5, 8)]
>>> m_b = [[1, 2], [3, 8]]
>>> lazy_matrix_mul(m_a, m_b)
array([[ 7, 18],
       [29, 74]])


Test for a matrix of negative values

>>> m_b = [[1, -2], (5, -8)]
>>> m_a = [[1, 2], [3, -2]]
>>> m_b = [[1, -2], [5, -8]]
>>> lazy_matrix_mul(m_a, m_b)
array([[ 11, -18],
       [ -7,  10]])


Test for a matrix of float inf

>>> m_a = [[1, 2], [3, float('inf')]]
>>> m_b = [[1, 2], [5, 8]]
>>> lazy_matrix_mul(m_a, m_b)
array([[11., 18.],
       [inf, inf]])


Test for a matrix of nan

>>> m_a = [[1, 2], [3, float('nan')]]
>>> m_b = [[1, 2], [5, 8]]
>>> lazy_matrix_mul(m_a, m_b)
array([[11., 18.],
       [nan, nan]])


Test for a matrix of both float inf and nan

>>> m_a = [[1, 2], [float('inf'), float('nan')]]
>>> m_b = [[1, 2], [5, 8]]
>>> lazy_matrix_mul(m_a, m_b)
array([[11., 18.],
       [nan, nan]])


Test for a matrix with no elements

>>> m_a = []
>>> m_b = [[]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
ValueError: shapes (0,) and (1,0) not aligned: 0 (dim 0) != 1 (dim 0)


Test for empty matrices

>>> m_b = [[], []]
>>> m_a = [[], []]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
ValueError: shapes (2,0) and (2,0) not aligned: 0 (dim 1) != 2 (dim 0)


>>> m_b = [[], []]
>>> m_a = [[]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
ValueError: shapes (1,0) and (2,0) not aligned: 0 (dim 1) != 2 (dim 0)


Test for matrices of different length

>>> m_a = [[1, 2], [3, 9, 8, 9], [9, 8, 8]]
>>> m_b = [[1, 2], [33, 8]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
ValueError: setting an array element with a sequence.


Test for matrix of None

>>> m_a = [[1, 2], [3, 9], [9, None]]
>>> m_b = [[1, 2], [33, 8]]
>>> lazy_matrix_mul(m_a, m_b)
Traceback (most recent call last):
TypeError: unsupported operand type(s) for *: 'NoneType' and 'int'

